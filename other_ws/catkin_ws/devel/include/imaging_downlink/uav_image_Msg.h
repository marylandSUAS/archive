// Generated by gencpp from file imaging_downlink/uav_image_Msg.msg
// DO NOT EDIT!


#ifndef IMAGING_DOWNLINK_MESSAGE_UAV_IMAGE_MSG_H
#define IMAGING_DOWNLINK_MESSAGE_UAV_IMAGE_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/Image.h>
#include <geometry_msgs/Point.h>

namespace imaging_downlink
{
template <class ContainerAllocator>
struct uav_image_Msg_
{
  typedef uav_image_Msg_<ContainerAllocator> Type;

  uav_image_Msg_()
    : image()
    , pos()
    , hdg(0.0)
    , type()
    , shape()
    , background_color()
    , alpha()
    , alpha_color()  {
    }
  uav_image_Msg_(const ContainerAllocator& _alloc)
    : image(_alloc)
    , pos(_alloc)
    , hdg(0.0)
    , type(_alloc)
    , shape(_alloc)
    , background_color(_alloc)
    , alpha(_alloc)
    , alpha_color(_alloc)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _pos_type;
  _pos_type pos;

   typedef float _hdg_type;
  _hdg_type hdg;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _shape_type;
  _shape_type shape;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _background_color_type;
  _background_color_type background_color;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alpha_type;
  _alpha_type alpha;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _alpha_color_type;
  _alpha_color_type alpha_color;





  typedef boost::shared_ptr< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct uav_image_Msg_

typedef ::imaging_downlink::uav_image_Msg_<std::allocator<void> > uav_image_Msg;

typedef boost::shared_ptr< ::imaging_downlink::uav_image_Msg > uav_image_MsgPtr;
typedef boost::shared_ptr< ::imaging_downlink::uav_image_Msg const> uav_image_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::imaging_downlink::uav_image_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace imaging_downlink

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'imaging_downlink': ['/home/imaging/muasimaging/Imaging/catkin_ws/src/imaging_downlink/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "80f79040cac03c9f8cbab283c780ba9a";
  }

  static const char* value(const ::imaging_downlink::uav_image_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x80f79040cac03c9fULL;
  static const uint64_t static_value2 = 0x8cbab283c780ba9aULL;
};

template<class ContainerAllocator>
struct DataType< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imaging_downlink/uav_image_Msg";
  }

  static const char* value(const ::imaging_downlink::uav_image_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_msgs/Image image\n\
geometry_msgs/Point pos \n\
float32 hdg\n\
string type\n\
string shape\n\
string background_color\n\
string alpha\n\
string alpha_color\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const ::imaging_downlink::uav_image_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.image);
      stream.next(m.pos);
      stream.next(m.hdg);
      stream.next(m.type);
      stream.next(m.shape);
      stream.next(m.background_color);
      stream.next(m.alpha);
      stream.next(m.alpha_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct uav_image_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::imaging_downlink::uav_image_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::imaging_downlink::uav_image_Msg_<ContainerAllocator>& v)
  {
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "pos: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.pos);
    s << indent << "hdg: ";
    Printer<float>::stream(s, indent + "  ", v.hdg);
    s << indent << "type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.type);
    s << indent << "shape: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.shape);
    s << indent << "background_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.background_color);
    s << indent << "alpha: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alpha);
    s << indent << "alpha_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.alpha_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGING_DOWNLINK_MESSAGE_UAV_IMAGE_MSG_H
